package inf353;
import java.util.HashMap;
import java.util.Map;

/**
 * Un Dictionnaire est un ensemble de L mot (tous différents). Chaque mot est associé à un entier
 * compris entre 0 et L-1.
 *
 * @author serasset
 *
 */
public interface Dictionnaire {

    private String[] mots;
    private Map<String, Integer> indices; 
    indices = new HashMap<>();

    /**
     * é.i: qcq
     * é.f.: le dictionnaire est vide.
     */
    public void vider();

    /**
     * é.i.: le dictionnaire contient D0 (un ensemble de N mots).
     * é.f.: si m appartient à D0; le dictionnaire est inchangé
     *       sinon, le dictionnaire contient D0 U {m}
     *
     * @param m
     */
    public void ajouterMot(String m);

    /**
     * renvoie l'entier associé à m;
     * @param m
     * @return
     */
    //Map<String, Integer>: spécifie que la clé est une chaîne de caractères (String) et la valeur  associée à chaque clé est un entier (Integer)
   //HashMap: est une classe de la bibliothèque standard Java qui implémente l'interface Map
    public int indiceMot(String m) {
        // Récupérez l'entier associé à la clé m.
        Integer indice = indices.get(m);

        // Si l'entier est non null, renvoyez-le. Sinon, renvoyez -1.
        return (indice != null) ? indice : -1;
    }
    /**
     * renvoie le mot associé à l'entier i;
     * @param i l'indice du mot à renvoyer
     * @return
     */
    public String motIndice(int i) {
        // Vérifiez si l'indice est dans la plage valide
        if (i >= 0 && i < mots.length) {
            return mots[i];
        } else {
            return "";
        }
    }
    /**
     * renvoie vrai ssi m est dans le dictionnaire.
     * @param m
     * @return
     */
    public boolean contient(String m){
        int i=0;
        while(i!=mots.length() && !(mots[i]==m)){
            i=i+1;
        }
        return !(i==mots.length())
    }


    /**
     * renvoie le nombre de mots de m.
     * @return
     */
    public int nbMots();

    /**
     * vrai ssi il existe m dans D0 tel que il exist u tq m = p.u
     *
     * (vari si un mot de D0 commence par p)
     * @param p le préfixe recherché
     * @return
     */
    public boolean contientPrefixe(String p);

    /**
     * renvoie la chaîne de caractères s telle que
     *  s est dans D0
     *  et m commence par s
     *  et il n'existe pas de chaîne s' ds D plus longue que s tq m commence par s.
     *
     * @param mot
     * @return
     */
    public String plusLongPrefixeDe(String mot);

}

    
